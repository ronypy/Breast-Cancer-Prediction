# -*- coding: utf-8 -*-
"""Breast cancer prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZIxuh0iFBHnGHRVFnhc26wxeanyDUanZ

##0. Loading library modules
"""

import pandas as pd
import numpy as np

"""##1. Loading Breast Cancer Wisconsin (Diagnostic) Data Set"""

from sklearn.datasets import load_breast_cancer
cancer = load_breast_cancer()
cancer_att = pd.DataFrame(data=cancer.data,columns=['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean',  'smoothness_mean', 'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean', 'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se', 'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se', 'fractal_dimension_se', 'radius_worst', 'texture_worst', 'perimeter_worst', 'area_worst', 'smoothness_worst', 'compactness_worst', 'concavity_worst', 'concave points_worst', 'symmetry_worst', 'fractal_dimension_worst'])
cancer_categories= pd.DataFrame(data=cancer.target,columns=['diagnosis'])

"""##2. Printing the number of features in the dataset"""

print("The cancer dataset has {0[0]} samples and {0[1]} feature attributes.".format(cancer_att.shape))

"""##3. Printing the number of samples in each class"""

cancer_categories_total = list(cancer_categories.shape)[0]
cancer_categories_count = list(cancer_categories['diagnosis'].value_counts())

#print("The cancer dataset has {} diagnosis samples, among them {} are benign and {} are malignant.".format(cancer_categories_total, 
                                                                                 cancer_categories_count[0], 
                                                                                 cancer_categories_count[1]))

print(cancer_categories.shape)
print(cancer_categories['diagnosis'].value_counts())

"""##4. Randomly spliting the dataset into training and test set"""

from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
x,y = shuffle(cancer_att,cancer_categories)
x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2, random_state=4)

"""##5.1 Classifier Support Vector Machine (SVM)"""

from sklearn import svm
model_1 = svm.SVC(kernel='linear')
model_1.fit(x_train, y_train)

"""##5.2 Classifier Decision Tree"""

from sklearn import tree
model_2 = tree.DecisionTreeClassifier()
model_2.fit(x_train, y_train)

"""##5.3 Classifier K-Nearest Neighbor (KNN)"""

from sklearn.neighbors import KNeighborsClassifier
model_3 = KNeighborsClassifier(n_neighbors=3)
model_3.fit(x_train, y_train)

"""##5.4 Classifier Random Forest"""

from sklearn.ensemble import RandomForestClassifier
model_4 = RandomForestClassifier(n_estimators=10)
model_4.fit(x_train, y_train)

"""##6. Predicting the class"""

model_1_predictions = model_1.predict(x_test)
model_2_predictions = model_2.predict(x_test)
model_3_predictions = model_3.predict(x_test)
model_4_predictions = model_4.predict(x_test)

model_4_predictions[0:10]

y_test[0:10]

"""##7. Measuring the accurecy of each classifier"""

print("Accuracy of SVM: {}%".format(model_1.score(x_test, y_test) * 100 ))
print("Accuracy of Decision Tree: {}%".format(model_2.score(x_test, y_test) * 100 ))
print("Accuracy of KNN: {}%".format(model_3.score(x_test, y_test) * 100 ))
print("Accuracy of Random Forest: {}%".format(model_4.score(x_test, y_test) * 100 ))

